extends Node


# 1.0 = one second. time gets reset every time_step, then all agents get updated
var time = 0
# total_time gets reset every time a new generation is started
var total_time = 0
# every time_step the cars network takes sensory information and decides how to act
var time_step = 0.000001
# every generation_step a new generation is made. this gets increased over time.
var generation_step = 20

# path to the car scene that will be controlled by the AI
var agent_body_path = "res://BHOP_SCENE.tscn"
# initialize the main node that handles the genetic algorithm with 11 inputs, 4 outputs
# the path to the car scene, enable the NEAT_Gui, and use the car_params parameters, which
# are saved under user://param_configs
var ga = GeneticAlgorithm.new(15, 1, agent_body_path, true)
#var ga = GeneticAlgorithm.new(15, 1, agent_body_path, true, "car_params")
# end the demo when the first car reaches this. TAU (360 degrees) = complete one track
#var fitness_threshold = 9000000

# when the first car reaches the halfway checkpoint, the generation time gets increased
#
func _ready():
	# IMPORTANT add the ga node as a child
	add_child(ga)
	# get the bodies (agent_body_path instances) generated by the ga, and place them on the track
	place_bodies(ga.get_curr_bodies())
	

var paused = false

onready var pop_node = get_node("/root/Main/Population")
var bestfitness = 0



func _physics_process(delta) -> void:
	"""Car agents update their networks every time_step seconds, and then drive
	according to the networks output. If generation_step time has passed, start a
	new generation.
	"""

	if not paused:
		# update time since last update
		time += delta; total_time += delta
		# if enough time has passed for the next time_step, update all agents
		if time > time_step:
			ga.next_timestep()
			time = 0
		# check if enough time has passed to start a new generation
		if total_time > generation_step or ga.all_agents_dead:
			# check if the best agent exceeded the fitness threshold
			ga.evaluate_generation()
			if ga.curr_best.fitness > bestfitness:
				bestfitness = ga.curr_best.fitness
				# either resume with next generation or switch to demo-choosing scene
#				pass
			# go to the next gen
			ga.next_generation()
			place_bodies(ga.get_curr_bodies())
			# every x gens, increase the generation_step
#            if ga.curr_generation % 2 == 0:
#                generation_step += 6
#                print("increased step to " + str(generation_step))
			total_time = 0


func place_bodies(bodies: Array) -> void:
	"""Adds the bodies scenes generated by the ga to the tree, and removes the old ones.
	"""
	# remove the bodies from the last generation
	for last_gen_body in pop_node.get_children():
		last_gen_body.queue_free()
	# add the new bodies to the track
	for body in bodies:
		pop_node.add_child(body)







